
#include <SDL.h>
#include <stddef.h>
#include <stdbool.h>
#include "angle_gl.h"
#include "shader.h"
#include "texture.h"
#include <cglm/cglm.h>   /* for inline */
#include <cglm/call.h>   /* for library call (this also includes cglm.h) */
#include <string.h>
#include <stb_image.h>


const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;


typedef struct {
    float * data_buffer;
    unsigned int data_buffer_size;
    int data_count;
    GLuint data_texture;
    vec3 data_camera;
    mat4 data_model;
    mat4 data_view;
    mat4 data_projection;

    GLuint shader_program;

    GLuint VAO;

    GLuint vertex_position;
    GLuint vertex_normal;
    GLuint vertex_uv;

    GLuint uniform_camera;
    GLuint uniform_model;
    GLuint uniform_view;
    GLuint uniform_projection;
    GLuint uniform_sampler;
} context;

void make_vertex(
        float *data, //float ao[6][4], float light[6][4],
        bool left, bool right, bool top, bool bottom, bool front, bool back,
        int wleft, int wright, int wtop, int wbottom, int wfront, int wback,
        float x, float y, float z) {
    float n = 0.5;
    static const float positions[6][4][3] = {
            {{-1, -1, -1}, {-1, -1, +1}, {-1, +1, -1}, {-1, +1, +1}},
            {{+1, -1, -1}, {+1, -1, +1}, {+1, +1, -1}, {+1, +1, +1}},
            {{-1, +1, -1}, {-1, +1, +1}, {+1, +1, -1}, {+1, +1, +1}},
            {{-1, -1, -1}, {-1, -1, +1}, {+1, -1, -1}, {+1, -1, +1}},
            {{-1, -1, -1}, {-1, +1, -1}, {+1, -1, -1}, {+1, +1, -1}},
            {{-1, -1, +1}, {-1, +1, +1}, {+1, -1, +1}, {+1, +1, +1}}
    };
    static const float normals[6][3] = {
            {-1, 0,  0},
            {+1, 0,  0},
            {0,  +1, 0},
            {0,  -1, 0},
            {0,  0,  -1},
            {0,  0,  +1}
    };
    static const float uvs[6][4][2] = {
            {{0, 0}, {1, 0}, {0, 1}, {1, 1}},
            {{1, 0}, {0, 0}, {1, 1}, {0, 1}},
            {{0, 1}, {0, 0}, {1, 1}, {1, 0}},
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}},
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}},
            {{1, 0}, {1, 1}, {0, 0}, {0, 1}}
    };
    static const float indices[6][6] = {
            {0, 3, 2, 0, 1, 3},
            {0, 3, 1, 0, 2, 3},
            {0, 3, 2, 0, 1, 3},
            {0, 3, 1, 0, 2, 3},
            {0, 3, 2, 0, 1, 3},
            {0, 3, 1, 0, 2, 3}
    };
    static const float flipped[6][6] = {
            {0, 1, 2, 1, 3, 2},
            {0, 2, 1, 2, 3, 1},
            {0, 1, 2, 1, 3, 2},
            {0, 2, 1, 2, 3, 1},
            {0, 1, 2, 1, 3, 2},
            {0, 2, 1, 2, 3, 1}
    };
    float *d = data;
    float s = 0.0625; // 1/16
    float a = 0 + 1 / 2048.0;
    float b = s - 1 / 2048.0;
    bool faces[6] = {left, right, top, bottom, front, back};
    int tiles[6] = {wleft, wright, wtop, wbottom, wfront, wback};
    for (int i = 0; i < 6; i++) {
        if (faces[i] == false) {
            continue;
        }
        float du = (tiles[i] % 16) * s;
        float dv = (tiles[i] / 16) * s;
        //int flip = ao[i][0] + ao[i][3] > ao[i][1] + ao[i][2];
        int flip = 0;
        for (int v = 0; v < 6; v++) {
            int j = flip ? flipped[i][v] : indices[i][v];
            *(d++) = x + n * positions[i][j][0];
            *(d++) = y + n * positions[i][j][1];
            *(d++) = z + n * positions[i][j][2];
            *(d++) = normals[i][0];
            *(d++) = normals[i][1];
            *(d++) = normals[i][2];
            *(d++) = du + (uvs[i][j][0] ? b : a);
            *(d++) = dv + (uvs[i][j][1] ? b : a);
            //*(d++) = ao[i][j];
            //*(d++) = light[i][j];
        }
    }
}


void setup(context *variable) {
    variable->shader_program = shader_programs_load("resource/Texture.vert", "resource/Texture.frag");
    //set vertex pointer
    variable->vertex_position = glGetAttribLocation(variable->shader_program, "position");
    variable->vertex_normal = glGetAttribLocation(variable->shader_program, "normal");
    variable->vertex_uv = glGetAttribLocation(variable->shader_program, "uv");
    //set uniform pointer
    variable->uniform_camera = glGetUniformLocation(variable->shader_program, "camera");
    variable->uniform_model= glGetUniformLocation(variable->shader_program, "model");
    variable->uniform_view = glGetUniformLocation(variable->shader_program, "view");
    variable->uniform_projection = glGetUniformLocation(variable->shader_program, "projection");
    variable->uniform_sampler = glGetUniformLocation(variable->shader_program, "sampler");
}

void before_draw(context *attrib) {
    //set vertex data
    attrib->data_buffer_size = sizeof(float) * 36 * 8;
    GLfloat * data = malloc(attrib->data_buffer_size);
    make_vertex(data, true, true, true, true, true, true, 16, 16, 32, 0, 16, 16, 0, 0, 0);
    attrib->data_buffer = data;
    attrib->data_count = 6 * 2;

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    attrib->VAO = VAO;
    // set vertex variable
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(attrib->data_buffer), attrib->data_buffer_size, GL_STATIC_DRAW);
    glEnableVertexAttribArray(attrib->vertex_position);
    glEnableVertexAttribArray(attrib->vertex_normal);
    glEnableVertexAttribArray(attrib->vertex_uv);
    glVertexAttribPointer(attrib->vertex_position, 3, GL_FLOAT, GL_FALSE,
                          sizeof(GLfloat) * 10, 0);
    glVertexAttribPointer(attrib->vertex_normal, 3, GL_FLOAT, GL_FALSE,
                          sizeof(GLfloat) * 10, (GLvoid *) (sizeof(GLfloat) * 3));
    glVertexAttribPointer(attrib->vertex_uv, 4, GL_FLOAT, GL_FALSE,
                          sizeof(GLfloat) * 10, (GLvoid *) (sizeof(GLfloat) * 6));
    glDisableVertexAttribArray(attrib->vertex_position);
    glDisableVertexAttribArray(attrib->vertex_normal);
    glDisableVertexAttribArray(attrib->vertex_uv);
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    //set texture data
    GLuint texture1;
    glGenTextures(1, &texture1);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    int width, height, nrChannels;
    stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
    unsigned char *tdata = stbi_load("resource/mine_texture.png", &width, &height, &nrChannels, 0);
    if (data) {
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, tdata);
        glGenerateMipmap(GL_TEXTURE_2D);
    } else {
        SDL_Log("Failed to load texture");
    }
    stbi_image_free(data);
    attrib->data_texture = texture1;

    //set texture variable
    glActiveTexture(GL_TEXTURE0 + attrib->data_texture -1);
    glBindTexture(GL_TEXTURE_2D, attrib->data_texture);
    glUniform1i(attrib->uniform_sampler, attrib->data_texture); //GL_TEXTURE0 means 0


    //set uniforms data
    // create transformations
    mat4 view = {
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
    };
    mat4 projection = {
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
    };
    mat4 model = {
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
    };
    glm_perspective(glm_rad(45.0f), (float) SCR_WIDTH / (float) SCR_HEIGHT, 0.1f, 100.0f,projection);
    glm_translate(view, (vec3){0.0f, 0.0f, -3.0f});
    vec3 eye = {20,20,20};
    vec3 target = {0,0,0};
    vec3 up = {0,1,0};
    glm_lookat(eye,target,up,view);

    memcpy(attrib->data_view,view,sizeof(mat4));
    memcpy(attrib->data_model,model,sizeof(mat4));
    memcpy(attrib->data_projection,projection,sizeof(mat4));
    memcpy(attrib->data_camera,eye,sizeof(vec3));
}

void draw(context *attrib) {
    glUseProgram(attrib->shader_program);
    // set uniform variable
    glUniform3f(attrib->uniform_camera, attrib->data_camera[0],attrib->data_camera[1],attrib->data_camera[2]);
    glUniformMatrix4fv(attrib->uniform_model, 1, GL_FALSE, attrib->data_model);
    glUniformMatrix4fv(attrib->uniform_view, 1, GL_FALSE, attrib->data_view);
    glUniformMatrix4fv(attrib->uniform_projection, 1, GL_FALSE, attrib->data_projection);
    //draw
    glActiveTexture(GL_TEXTURE0 + attrib->data_texture -1);
    glBindVertexArray(attrib->VAO);
    glDrawArrays(GL_TRIANGLES, 0, attrib->data_count);

}






int main(int argc, char *argv[]) {

    // 1. Init SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        SDL_Log("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return EXIT_FAILURE;
    }

    //Setup the exit hook
    //atexit(SDL_Quit);

    // Request OpenGL ES 3.0
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
    //Want double-buffering
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

    // 2. Create the window
    SDL_Window *window = SDL_CreateWindow("SDL2",
                                          SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCR_WIDTH, SCR_HEIGHT,
                                          SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
    if (!window) {
        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "Error", "Couldn't creat the main window", NULL);
        return EXIT_FAILURE;
    }

    // 3. Create the OpenGL context
    if (!SDL_GL_CreateContext(window)) {
        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "Error", "Couldn't create an opengl context", NULL);
        return EXIT_FAILURE;
    }



    context c = {0};

    setup(&c);
    before_draw(&c);

    // Wait for the user to quit
    // ------------------------------------------------------------
    // ------------------------------------------------------------
    // ------------------------------------------------------------
    bool quit = false;
    while (!quit) {
        SDL_Event event;
        if (SDL_WaitEvent(&event) != 0) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
        }
        // render
        // ------------------------------------------------------------
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        draw(&c);

        //Update the window
        SDL_GL_SwapWindow(window);
    }


    return EXIT_SUCCESS;

}