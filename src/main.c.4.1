
#include <SDL.h>
#include <stddef.h>
#include <stdbool.h>
#include "angle_gl.h"
#include "shader.h"
#include "texture.h"
#include <cglm/cglm.h>   /* for inline */
#include <cglm/call.h>   /* for library call (this also includes cglm.h) */
#include <string.h>
#include <stb_image.h>


const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;


typedef struct {
    float *data_buffer;
    unsigned int data_buffer_size;
    int data_count;
    GLuint data_texture;
    vec3 data_camera;
    mat4 data_model;
    mat4 data_view;
    mat4 data_projection;

    GLuint shader_program;

    GLuint VAO;

    GLuint vertex_position;
    GLuint vertex_color;
    GLuint vertex_uv;

    GLuint uniform_camera;
    GLuint uniform_model;
    GLuint uniform_view;
    GLuint uniform_projection;
    GLuint uniform_sampler;
} context;


void setup(context *variable) {
    variable->shader_program = shader_programs_load("resource/4.1.texture.vert", "resource/4.1.texture.frag");
    //set vertex pointer
    variable->vertex_position = glGetAttribLocation(variable->shader_program, "aPos");
    variable->vertex_color = glGetAttribLocation(variable->shader_program, "aColor");
    variable->vertex_uv = glGetAttribLocation(variable->shader_program, "aTexCoord");

// set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    float vertices[] = {
            // positions          // colors           // texture coords
            0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f, // top right
            0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f, // bottom right
            -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f, // bottom left
            -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f  // top left
    };
    unsigned int indices[] = {
            0, 1, 3, // first triangle
            1, 2, 3  // second triangle
    };

    unsigned int VBO, VAO, EBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);

    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(variable->vertex_position , 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // color attribute
    glVertexAttribPointer(variable->vertex_color, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);
    // texture coord attribute
    glVertexAttribPointer(variable->vertex_uv, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    variable->VAO = VAO;


    // load and create a texture
    // -------------------------
    unsigned int texture1;
    glGenTextures(1, &texture1);
    glBindTexture(GL_TEXTURE_2D, texture1);
    // set the texture wrapping parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // set texture filtering parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // load image, create texture and generate mipmaps
    int width, height, nrChannels;
    stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
    unsigned char *data = stbi_load("resource/texture.png", &width, &height, &nrChannels, 0);
    if (data) {
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
    } else {
        SDL_Log("Failed to load texture");
    }
    stbi_image_free(data);

    variable->data_texture = texture1;


}

void before_draw(context *attrib) {
    // activate shader
    glUseProgram(attrib->shader_program);
//    glUniform1i(glGetUniformLocation(attrib->shader_program, "texture1"), 0);
//    glUniform1i(glGetUniformLocation(attrib->shader_program, "texture1"), 1);
    //set uniform variable
//    glUniform3f(attrib->uniform_camera, attrib->data_camera[0], attrib->data_camera[1], attrib->data_camera[2]);
//    glUniformMatrix4fv(attrib->uniform_model, 1, GL_FALSE, attrib->data_model);
//    glUniformMatrix4fv(attrib->uniform_view, 1, GL_FALSE, attrib->data_view);
//    glUniformMatrix4fv(attrib->uniform_projection, 1, GL_FALSE, attrib->data_projection);

}

void draw(context *attrib) {
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // bind textures on corresponding texture units

//    select the shader program to use (glUseProgram)
//    for each texture activate in turn the texture unit (glActiveTexture(GL_TEXTURE_0+i) and bind the texture ('glBindTexture`)
//    set the sampler uniforms to the texture units to use (glUniform1i(â€¦, i)).
//    draw the geometry.

    glActiveTexture(GL_TEXTURE0+attrib->data_texture);
    glBindTexture(GL_TEXTURE_2D, attrib->data_texture);
    //draw
    glBindVertexArray(attrib->VAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
    //glDrawArrays(GL_TRIANGLES, 0, attrib->data_count);

}


int main(int argc, char *argv[]) {

    // 1. Init SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        SDL_Log("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return EXIT_FAILURE;
    }

    //Setup the exit hook
    //atexit(SDL_Quit);

    // Request OpenGL ES 3.0
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
    //Want double-buffering
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

    // 2. Create the window
    SDL_Window *window = SDL_CreateWindow("SDL2",
                                          SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCR_WIDTH, SCR_HEIGHT,
                                          SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
    if (!window) {
        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "Error", "Couldn't creat the main window", NULL);
        return EXIT_FAILURE;
    }

    // 3. Create the OpenGL context
    if (!SDL_GL_CreateContext(window)) {
        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "Error", "Couldn't create an opengl context", NULL);
        return EXIT_FAILURE;
    }


    context c = {0};

    setup(&c);
    before_draw(&c);

    // Wait for the user to quit
    // ------------------------------------------------------------
    // ------------------------------------------------------------
    // ------------------------------------------------------------
    bool quit = false;
    while (!quit) {
        SDL_Event event;
        if (SDL_WaitEvent(&event) != 0) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
        }
        // render
        // ------------------------------------------------------------
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        draw(&c);

        //Update the window
        SDL_GL_SwapWindow(window);
    }


    return EXIT_SUCCESS;

}